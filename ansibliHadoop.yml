#cat ansibleHadoop.yml 
###################################################################################################
#                                                                                                 #
#    1.Must Set IP-Group In File "/etc/ansible/hosts"                                             #
#    2.The Clusters Use The Same User Id "iii" And Pw To Access Each Machine                      #
#    3.The Clusters Use Only A Pair Keys To Set Accessing Without Key                             #
#    4.It Would Better Reboot The Clusters When Script Finished Then Start To Install Cloudera    #
#                                                                                                 #
###################################################################################################
---
- hosts: all
  vars:
    user: iii
    password: "$1$orM8G0Po$T8IK0Lwbiwh1DJrOurm9O."
    id_rsa: "/home/iii/.ssh/id_rsa"
    id_pub: "/home/iii/.ssh/id_rsa.pub"
    hosts: "/etc/hosts"    
  remote_user: root
  
# Sudo

  tasks:  
    - name: Config /etc/sudoers
      lineinfile: dest=/etc/sudoers state=present line='{{item}}' validate='visudo -cf %s'
      with_items:
             - "{{ user }} ALL=(ALL) NOPASSWD: ALL"
             - "Defaults:{{user}} !requiretty"

# Set Accessing Without Key 
            
    - name: Copy /etc/hosts 
      copy: 
        src: "{{ hosts }}" 
        dest: "{{ hosts }}"
        owner: root 
        group: root 
        mode: 0755
      tags:
        -  etc_hosts
                
    - name: Config /etc/hosts.allow
      shell: "cat /etc/hosts | awk '{print $1}' >> /etc/hosts.allow"
      tags:
        - hosts_allow
        
    - name: create ssh file
      file:
        path: /home/{{ user }}/.ssh
        owner: iii
        group: iii
        mode: 0700
        state: directory
      tags:
        -  mkdir_ssh

  
    - name: Copy Primary Key 
      copy: 
        src: /home/"{{ user }}"/.ssh/id_rsa 
        dest: /home/"{{ user }}"/.ssh/id_rsa
        owner: "{{ user }}" 
        group: "{{ user }}" 
        mode: 0600        
      tags: 
        - pr_key
      
    - name: Copy Public Key 
      copy: 
        src: /home/"{{ user }}"/.ssh/id_rsa.pub
        dest: /home/"{{ user }}"/.ssh/id_rsa.pub
        owner: "{{ user }}" 
        group: "{{ user }}" 
        mode: 0600
      tags:
        -  pu_key   

    - name: Set Authorized Key
      authorized_key:
        user: "{{ user }}"
        state: present
        key: "{{ lookup('file', '{{ id_pub }}') }}"
      tags:
        - a_key
        
    - name:  Set known_hosts
      shell: "ssh-keyscan -4 $(cat /etc/hosts | awk '{print $1}')  >> /home/'{{ user }}'/.ssh/known_hosts"
      tags:
        - known_hosts
   
        
# Sshd

    - name: set sshd StrictHostKeyChecking
      lineinfile:
        dest: /etc/ssh/ssh_config
        regexp: '^#.StrictHostKeyChecking ask'
        state: present
        line: "StrictHostKeyChecking no"
      tags:
        - sshd
        
    - name: sshd restart
      service:
          name: sshd
          state: restarted
      tags:
        - sshd 
        
 # Hugepage     
 
    - name: Close Hugepage defrag
      shell: "echo never > /sys/kernel/mm/transparent_hugepage/defrag"
      tags:
        - hugepage_defrag
 
    - name: Close Hugepage enable
      shell: "echo never > /sys/kernel/mm/transparent_hugepage/enabled"
      tags:
        - hugepage_enable
        
 # Swap      
 
    - name: setting vm.swappiness value 
      sysctl:
        name: vm.swappiness
        value: 5
        state: present
      tags:
        - swappiness

# NTP

    - name: Install NTP
      yum: 
        name: ntp
        state: installed
      tags:
        - ntp
        
    - name: Run NTP 
      service: 
        name: ntpd
        state: started
        enabled: yes
      tags:
        - ntp   
 
# Firewalld 
    
    - name: Close Firewalld    
      shell: systemctl stop firewalld
      tags:
       - firewalld   
        
    - name: Disable Firewalld    
      shell: systemctl disable firewalld
      ignore_errors: True
      tags:
        - firewalld
        
# Selinux   
  
    - name: Close Selinux
      command: /sbin/setenforce 0
      tags:
       - selinux      
      
    - name: Disable Selinux  
      selinux:
        state: disabled
      tags:
        - selinux

 # Check Status   
 
    - name: Check Selinux
      shell: /sbin/getenforce
      register: selinux_result
      tags:
        - selinux
      
    - name: Print Selinux
      debug:
        var: selinux_result.stdout
        verbosity: 0
      tags:
        - selinux

    - name: Check Firewalld
      shell: systemctl status firewalld
      ignore_errors: True
      tags:
        - firewalld
        
